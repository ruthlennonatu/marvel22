- A DevOps pipeline is a set of automated processes and tools
that allows both developers and operations professionals to work
cohesively to build and deploy code to a production environment.
- It typicyally includes build automation, continuous integration,
automation testing, validation, and reporting, as well as some 
barriers that require human intervention before code can proceed.
- DevOps pipelines are defined by continuous feedback and continuous
operations; instead of one-off tests or scheduled deployments, each
function occurs on an ongoing basis.
- There is no one standard DevOps pipeline; an organization's design
and implementation of a DevOps pipeline depends on its available
technology, the level of experience of the engineers, the budget, and
more.
- A DevOps engineer should have a wide-range knowledge of development
and operations, including coding, infrastructure management, system 
administration, and DevOps toolchains.
- While every pipeline is unique, most organizations use similar 
fundamental components. Each step is evaluated for success before
moving on to the next stage of the pipeline. In the event of failure,
the pipeline is stopped, and the developer is provided feedback.
- Continuous Integration is the practice of making frequent commits to 
a common source code repository, to ease the process of keeping the 
different developers' code uniform.
- Continuous delivery is the idea that the main source code of the 
project is always in a functional state, so that progress can always be
observed by an outsider.
-Continuous deployment is the practice of having a level of continuous 
testing and operations that are so robust that new versions of software
are validated and deployed into production without the need for human 
intervention. This is typically only considered necessary in very large
scale projects.
- Continuous Testing is very important; it is the constantly run cycle of
deployment to testing to deployment for every change that is made, which 
allows faster releases and a higher quality product. You should have 
automated tests throughout the whole pipeline, including ones that run every
time a change is made to the code.
- Continous operations is a more vague term, usually defined as having two 
seperate production enviroments, one that is publicly accessible and one 
that isn't, where new code is worked on and tested in the private enviroment,
and when it is found to be functional, the private and public environments
are then switched, so public traffic is directed to the environment with the 
new functional code, and further new code that is not confirmed to be 
functional can continue to be developed and tested in the now private 
environment. The purpose is so development can occur with the product never 
having to be taken down for maintenance.
- Build status determines whether the product is in a deployable state, so a 
build process should be in place from the moment the product starts development.
Fast builds are ideal, as they provide crucial information for the product's 
status.
- In order to make sure that builds are fast, the developer should choose the 
right machine, make sure the build server is close, and making sure there is 
enough server power for the scale of the project.

Info Sources: https://www.atlassian.com/devops/devops-tools/devops-pipeline
https://learn.microsoft.com/en-us/azure/architecture/framework/devops/release-engineering-performance 